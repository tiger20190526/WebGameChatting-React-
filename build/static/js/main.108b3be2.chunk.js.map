{"version":3,"sources":["components/Navigation/styled.js","components/Button/index.js","userSlice.js","components/Wrapper/index.js","components/Navigation/index.js","components/LoginPage/LoginPropmt/styled.js","components/LoginPage/LoginPropmt/index.js","components/LoginPage/index.js","components/Menu/styled.js","components/Menu/generateChatroom.js","utils/useChatroomMessagesInfo.js","components/Menu/index.js","components/ChatRoom/styled.js","components/ChatRoom/generateInitialMessage.js","components/ChatRoom/generateMessage.js","components/ChatRoom/index.js","components/RoomPage/styled.js","components/RoomPage/index.js","App.js","globalStyle.js","theme.js","store.js","index.js"],"names":["NavBar","styled","nav","theme","color","thunder","midGray","NavigationContainer","section","Logo","Link","white","Button","button","buttonBorder","props","marginTop","css","plain","charade","userSlice","createSlice","name","initialState","loading","user","error","reducers","getUser","state","setUser","payload","userInfo","getUserError","setTestUser","uid","photoURL","displayName","resetUser","selectUser","selectUserState","actions","Wrapper","div","Navigation","auth","firebase","useAuthState","to","Container","Header","h2","p","Copyright","Typography","variant","align","href","target","rel","LoginPrompt","dispatch","useDispatch","useState","setName","disabled","setDisabled","string","setString","isComposed","setIsComposed","useEffect","component","TextField","margin","required","fullWidth","id","label","autoFocus","onChange","e","value","onKeyDown","key","preventDefault","onCompositionStart","onCompositionEnd","onClick","Box","mt","LoginPage","useSelector","header","ChatroomsContainer","Room","generateChatroom","chatroom","currentUserId","members","some","item","private","ref","title","useChatroomMessagesInfo","worldRef","roomRef","worldidRef","firestore","collection","worldmsgRef","doc","useCollectionData","worldIds","chatroomsRef","messagesRef","chatrooms","getMessagesByTime","orderBy","messages","currentRoom","find","Menu","storeUser","useParams","titleInput","setTitleInput","worldIdInput","setWorldIdInput","style","onSubmit","nanoid","trim","set","createdAt","FieldValue","serverTimestamp","creator","console","log","placeholder","lineHeight","map","RelativeDiv","MessagesList","ul","Message","li","isAuthor","MessageAuthorName","AuthorAvatar","img","MessageText","MessageTime","MessageForm","form","FormInput","input","FormSubmit","generateInitialMessage","generateMessage","message","currentUser","min","max","authorName","alt","src","text","faceColor","dotColor","dieSize","numDice","defaultRoll","Math","ceil","floor","random","Date","seconds","toLocaleTimeString","toLocaleDateString","ChatRoom","dummy","useRef","setInput","onNewMessageSubmit","a","add","current","scrollIntoView","behavior","length","GridContainer","RoomPage","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","path","GlobalStyle","createGlobalStyle","woodsmoke","shark","rootReducer","combineReducers","userReducer","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.108b3be2.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = styled.nav`\n  background-color: ${({ theme }) => theme.color.thunder};\n  border-bottom: 2px solid ${({ theme }) => theme.color.midGray};\n`;\nconst NavigationContainer = styled.section`\n  display: flex;\n  padding: 10px 0;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst Logo = styled(Link)`\n  margin: 0;\n  font-family: \"Sansita Swashed\", cursive;\n  font-size: 24px;\n  text-decoration: none;\n  font-weight: bold;\n  color: ${({ theme }) => theme.color.white};\n`;\n\nexport { NavBar, Logo, NavigationContainer };\n","import styled, { css } from \"styled-components\";\n\nconst Button = styled.button`\n  background-color: transparent;\n  color: ${({ theme }) => theme.color.white};\n  font-size: 16px;\n  line-height: 130%;\n  padding: 12px 22px;\n  border: 2px solid ${({ theme }) => theme.color.buttonBorder};\n  border-radius: 15px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  &:hover {\n    background-color: ${({ theme }) => theme.color.buttonBorder};\n    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n  }\n  ${(props) =>\n    props.marginTop &&\n    css`\n      margin-top: 24px;\n    `}\n  ${(props) =>\n    props.plain &&\n    css`\n      padding: 12px 22px;\n      color: ${({ theme }) => theme.color.white};\n      border: none;\n      background-color: ${({ theme }) => theme.color.charade};\n      &:hover {\n        box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);\n      }\n    `}\n`;\n\nexport default Button;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    loading: null,\n    user: null,\n    error: false,\n  },\n  reducers: {\n    getUser: (state) => {\n      state.loading = true;\n    },\n    setUser: (state, { payload }) => {\n      state.user = payload.userInfo;\n      state.loading = false;\n    },\n    getUserError: (state) => {\n      state.error = true;\n      state.loading = true;\n    },\n    setTestUser: (state) => {\n      state.user = {\n        uid: \"testUser\",\n        photoURL: \"https://www.practicepte.com/images/clients/avatar_man.jpg\",\n        displayName: \"テストユーザー\",\n      };\n      state.loading = false;\n    },\n    resetUser: (state) => {\n      state.user = null;\n      state.error = null;\n      state.loading = null;\n    },\n  },\n});\n\nconst selectUserState = (state) => state.user;\nconst selectUser = (state) => selectUserState(state).user;\nexport { selectUserState, selectUser };\nexport const {\n  getUser,\n  setUser,\n  getUserError,\n  setTestUser,\n  resetUser,\n} = userSlice.actions;\nexport default userSlice.reducer;\n","import styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  margin: 0 auto;\n  max-width: 1220px;\n  @media (max-width: 1220px) {\n    width: calc(100%-32px);\n    margin: 0 16px;\n  } ;\n`;\nexport { Wrapper };\n","import React from \"react\";\nimport firebase from \"firebase/app\";\nimport { NavBar, Logo, NavigationContainer } from \"./styled.js\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport SignOut from \"../SignOut\";\nimport SignIn from \"../SignIn\";\nimport { Wrapper } from \"../Wrapper/index.js\";\n\nconst Navigation = () => {\n  const auth = firebase.auth();\n  const [user, loading] = useAuthState(auth);\n  return (\n    <NavBar>\n      <Wrapper>\n        <NavigationContainer>\n          <Logo to=\"/room/general\">サイコロチャットアプリ</Logo>\n        </NavigationContainer>\n      </Wrapper>\n    </NavBar>\n  );\n};\n\nexport default Navigation;\n","import styled from \"styled-components\";\n\nconst Container = styled.section`\n  display: grid;\n  margin: 0 auto;\n  margin-top: 20vh;\n  padding: 32px;\n  text-align: center;\n  width: 40%;\n  justify-items: center;\n  background-color: ${({ theme }) => theme.color.white};\n  border-radius: 15px;\n  @media (max-width: 1024px) {\n    width: unset;\n    padding: 18px;\n    max-width: 80%;\n  }\n`;\nconst Header = styled.h2`\n  font-size: 28px;\n  font-weight: bold;\n  line-height: 140%;\n`;\nconst Paragraph = styled.p`\n  margin-top: 22px;\n  font-size: 22px;\n  line-height: 140%;\n`;\n\nexport { Container, Header, Paragraph };\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from \"react-redux\";\nimport { setTestUser } from \"../../../userSlice\";\nimport Button from \"../../Button\";\nimport Typography from '@material-ui/core/Typography';\nimport Link from '@material-ui/core/Link';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport { Container, Header } from \"./styled\";\n\nfunction Copyright() {\n  return (\n    <Typography variant=\"body2\" color=\"primary\" align=\"center\">\n      {'Copyright © '}\n      <Link\n        color=\"inherit\"\n        href=\"https://twitter.com/diveintohacking\"\n        target=\"_blank\"\n        rel=\"noopener\"\n      >\n        はむさん\n      </Link>\n    </Typography>\n  );\n}\n\nconst LoginPrompt = ({ auth }) => {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [string, setString] = useState('');\n  const [isComposed, setIsComposed] = useState(false);\n\n  useEffect(() => {\n    const disabled = string === '';\n    setDisabled(disabled);\n  }, [string]);\n\n  return (\n    <Container>\n      <Header>\n        <Typography component=\"h1\" color=\"primary\" variant=\"h5\">\n          ようこそ\n        </Typography>\n      </Header>\n      <TextField\n        variant=\"outlined\"\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"name\"\n        label=\"ニックネーム\"\n        name=\"name\"\n        autoFocus\n        onChange={(e) => setString(e.target.value)}\n        onKeyDown={(e) => {\n          if (isComposed) return;\n\n          if (e.key === 'Enter') {\n            setName(e.target.value);\n            e.preventDefault();\n          }\n        }}\n        onCompositionStart={() => setIsComposed(true)}\n        onCompositionEnd={() => setIsComposed(false)}\n      />\n      <Button\n        marginTop\n        plain\n        disabled={disabled}\n        onClick={() => {\n          dispatch(setTestUser());\n        }}\n      >\n        はじめる\n      </Button>\n      <Box mt={8}>\n        <Copyright />\n      </Box>\n    </Container>\n  );\n};\n\nexport default LoginPrompt;\n","import { useSelector } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\nimport { selectUser } from \"../../userSlice\";\nimport Navigation from \"../Navigation\";\nimport LoginPrompt from \"./LoginPropmt\";\n\nconst LoginPage = ({ auth }) => {\n  const storeUser = useSelector(selectUser);\n  if (storeUser) {\n    return <Redirect to=\"/room/general\"></Redirect>;\n  }\n  return (\n    <>\n      <Navigation></Navigation>\n      <LoginPrompt auth={auth}></LoginPrompt>\n    </>\n  );\n};\nexport default LoginPage;\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nconst Container = styled.div``;\n\nconst Header = styled.header`\n  font-family: \"Noto Sans JP\", sans-serif;\n  font-size: 22px;\n  line-height: 130%;\n  margin-top: 16px;\n`;\nconst ChatroomsContainer = styled.div`\n  display: grid;\n  grid-gap: 6px;\n  margin-top: 16px;\n`;\nconst Room = styled(Link)`\n  text-decoration: none;\n  font-family: \"Noto Sans JP\", sans-serif;\n  font-size: 18px;\n  line-height: 130%;\n  padding: 10px 16px;\n  border: none;\n  color: ${({ theme }) => theme.color.white};\n  background-color: ${({ theme }) => theme.color.charade};\n  border-radius: 15px;\n`;\n\nexport { Container, Room, Header, ChatroomsContainer };\n","import { Room } from \"./styled\";\n\nconst generateChatroom = (chatroom, currentUserId) => {\n  //checking if a chatroom should be displayed\n  // user needs to be a member or the chat should be public\n  if (\n    (chatroom.members &&\n      chatroom.members.some((item) => item === currentUserId)) ||\n    !chatroom.private\n  ) {\n    return (\n      <Room to={`/room/${chatroom.ref}`} key={`${chatroom.ref}`}>\n        {chatroom.title}\n      </Room>\n    );\n  }\n  return null;\n};\nexport default generateChatroom;\n","import { useCollectionData } from \"react-firebase-hooks/firestore\";\n\n// const useChatroomMessagesInfo = ({ firebase, roomRef = null }) => {\n//   const firestore = firebase.firestore();\n//   const chatroomsRef = firestore.collection(\"chatrooms\");\n//   const messagesRef = chatroomsRef.doc(roomRef).collection(\"messages\");\n//   const [chatrooms] = useCollectionData(chatroomsRef);\n//   const getMessagesByTime = messagesRef.orderBy(\"createdAt\");\n//   const [messages] = useCollectionData(getMessagesByTime);\n//   const currentRoom = chatrooms\n//     ? chatrooms.find((chatroom) => roomRef === chatroom.ref)\n//     : null;\n\n//   return { chatrooms, messages, currentRoom, messagesRef, chatroomsRef };\n// };\nconst useChatroomMessagesInfo = ({ firebase, worldRef = null, roomRef = null }) => {\n  const firestore = firebase.firestore();\n  const worldidRef = firestore.collection(\"worldId\");\n  const worldmsgRef = worldidRef.doc(worldRef).collection(\"messages\");\n  const [worldIds] = useCollectionData(worldidRef);\n  const chatroomsRef = worldmsgRef.doc(worldRef).collection(\"chatrooms\");\n  const messagesRef = chatroomsRef.doc(roomRef).collection(\"messages\");\n  const [chatrooms] = useCollectionData(chatroomsRef);\n  const getMessagesByTime = messagesRef.orderBy(\"createdAt\");\n  const [messages] = useCollectionData(getMessagesByTime);\n  const currentRoom = chatrooms\n    ? chatrooms.find((chatroom) => roomRef === chatroom.ref)\n    : null;\n\n  return { worldIds, chatrooms, messages, currentRoom, messagesRef, chatroomsRef };\n};\nexport default useChatroomMessagesInfo;\n","import { nanoid } from \"nanoid\";\nimport { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { selectUser } from \"../../userSlice\";\nimport generateChatroom from \"./generateChatroom\";\nimport { Container, Header, ChatroomsContainer } from \"./styled\";\nimport useChatroomMessagesInfo from \"../../utils/useChatroomMessagesInfo\";\n\nconst Menu = ({ firebase }) => {\n  const storeUser = useSelector(selectUser);\n  const { roomRef } = useParams();\n  const { worldIds, chatrooms, chatroomsRef, currentRoom } = useChatroomMessagesInfo({\n    firebase: firebase,\n    roomRef: roomRef,\n  });\n  const [titleInput, setTitleInput] = useState(\"\");\n  const onTitleInputChange = (e) => {\n    setTitleInput(e.target.value);\n  };\n\n  const [worldIdInput, setWorldIdInput] = useState(\"\");\n  const onWorldIdInputChange = (e) => {\n    setWorldIdInput(e.target.value);\n  }\n  const currentUserId = storeUser ? storeUser.uid : null;\n\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n    const ref = nanoid();\n    const members = [currentUserId];\n    try {\n      if (titleInput.trim() !== \"\") {\n        chatroomsRef.doc(ref).set({\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          title: titleInput,\n          creator: currentUserId,\n          ref: ref,\n          private: false,\n          members: members,\n        });\n        setTitleInput(\"\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const onWorldFormSubmit = (e) => {\n    e.preventDefault();\n    const ref = nanoid();\n    const members = [currentUserId];\n    try {\n      if (titleInput.trim() !== \"\") {\n        worldIds.doc(ref).set({\n          createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n          title: worldIdInput,\n          creator: currentUserId,\n          ref: ref,\n          private: false,\n          members: members,\n        });\n        setWorldIdInput(\"\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  return (\n    <Container>\n      <div style={{marginTop: 50}}>&nbsp;</div>\n\n      <form onSubmit={onWorldFormSubmit}>\n        <input\n          placeholder=\"WorldId\"\n          value={worldIdInput}\n          style={{lineHeight: 2}}\n          onChange={onWorldIdInputChange}\n        ></input>\n      </form>\n\n      <form onSubmit={onFormSubmit}>\n        <input\n          placeholder=\"チャットタイトル\"\n          value={titleInput}\n          style={{lineHeight: 2}}\n          onChange={onTitleInputChange}\n        ></input>\n        <button>新しい部屋を追加</button>\n      </form>\n      <Header>チャットルーム:</Header>\n      <ChatroomsContainer>\n        {chatrooms\n          ? chatrooms.map((chatroom) =>\n              generateChatroom(chatroom, currentUserId)\n            )\n          : \"\"}\n      </ChatroomsContainer>\n    </Container>\n  );\n};\nexport default Menu;\n","import styled, { css } from \"styled-components\";\n\nconst Header = styled.header`\n  font-family: \"Noto Sans JP\", sans-serif;\n  margin-top: 30px;\n  text-align: center;\n  font-weight: 500;\n  font-size: 26px;\n  line-height: 20px;\n  &:first-letter {\n    text-transform: uppercase;\n  }\n`;\nconst RelativeDiv = styled.div`\n  max-width: 100%;\n  position: relative;\n`;\nconst MessagesList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  margin: 0px;\n  padding: 16px;\n`;\nconst Message = styled.li`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  margin-top: 16px;\n  ${({ isAuthor }) =>\n    isAuthor &&\n    css`\n      flex-direction: row-reverse;\n    `}\n`;\nconst MessageAuthorName = styled.p`\n  font-size: 13px;\n  position: absolute;\n  min-width: 60px;\n  transform: translateY(-39px) translateX(-5px);\n  color: ${({ theme }) => theme.color.midGray};\n`;\nconst AuthorAvatar = styled.img`\n  width: 45px;\n  border-radius: 50%;\n  align-self: flex-start;\n  transform: translateY(-10px);\n  ${({ isAuthor }) =>\n    isAuthor &&\n    css`\n      transform: translateY(20px);\n    `};\n`;\nconst MessageText = styled.p`\n  position: relative;\n  font-size: 15px;\n  line-height: 140%;\n  border: #1c1c24 1px solid;\n  padding: 8px 12px;\n  margin: 0 8px;\n  color: white;\n  border-radius: 10px;\n  border-top-left-radius: 0;\n  ${({ isAuthor }) =>\n    isAuthor &&\n    css`\n      border: none;\n      background-color: #4447e2;\n      border-top-left-radius: 10px;\n      border-bottom-right-radius: 0;\n    `}\n`;\nconst MessageTime = styled.div`\n  font-size: 12px;\n  text-align: center;\n  flex-grow: 0;\n  color: #ccc;\n  margin: 0 8px;\n`;\nconst MessageForm = styled.form`\n  width: calc(1220px - 300px);\n  max-width: 1220px;\n  margin: 0 auto;\n  padding: 0;\n  display: flex;\n  position: fixed;\n  bottom: 0;\n  @media (max-width: 1200px) {\n    width: calc(100% - 332px);\n  }\n`;\nconst FormInput = styled.input`\n  font-family: \"Roboto\", sans-serif;\n  padding: 12px;\n  flex-grow: 1;\n  font-size: 16px;\n  border: #1c1c24 1px solid;\n  border-radius: 0;\n  border-top-left-radius: 8px;\n  &::placeholder {\n  }\n  &:focus {\n    border: #1c1c24 1px solid;\n  }\n`;\nconst FormSubmit = styled.button`\n  padding: 12px 20px;\n  font-size: 26px;\n  border: #1c1c24 1px solid;\n  border: none;\n  border-top-right-radius: 8px;\n  color: white;\n  &:hover {\n    filter: brightness(1.2);\n  }\n`;\nexport {\n  RelativeDiv,\n  FormSubmit,\n  FormInput,\n  MessagesList,\n  AuthorAvatar,\n  Message,\n  MessageAuthorName,\n  MessageText,\n  MessageTime,\n  MessageForm,\n  Header,\n};\n","const generateInitialMessage = (currentRoom) => {\n  return `こんにちは ！ これはの始まりです #${\n    currentRoom && currentRoom.title\n  } チャネル`;\n};\nexport default generateInitialMessage;\n//function that generates a message for an empty chatRoom\n","import {\n  AuthorAvatar,\n  Message,\n  MessageAuthorName,\n  MessageText,\n  MessageTime,\n} from \"./styled\";\n\nimport ReactDice from 'react-dice-complete'\nimport 'react-dice-complete/dist/react-dice-complete.css'\n\nconst generateMessage = (message, currentUser) => {\n  const isAuthor = message.uid === currentUser.uid;\n  let name;\n  name = message.authorName ? message.authorName : null;\n\n  function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n  }\n\n  // console.log(name);\n  return (\n    <Message isAuthor={isAuthor} key={`${message.id}${message.uid}`}>\n      <AuthorAvatar\n        isAuthor={isAuthor}\n        alt={\"avatar\"}\n        src={message.photoURL}\n      ></AuthorAvatar>\n\n      <MessageText isAuthor={isAuthor}>\n        <MessageAuthorName>{name}</MessageAuthorName>\n        {message.text}\n      </MessageText>\n\n      <ReactDice\n        faceColor=\"#FF5A00\"\n        dotColor=\"#FFFFFF\"\n        dieSize={30}\n        numDice={1}\n        defaultRoll={getRandomInt(1,6)}\n      />\n\n      <MessageTime>\n        {message.createdAt\n          ? `${new Date(message.createdAt.seconds * 1000).toLocaleTimeString()}\n                     ${new Date(\n                       message.createdAt.seconds * 1000\n                     ).toLocaleDateString()}`\n          : ``}\n      </MessageTime>\n    </Message>\n  );\n};\nexport default generateMessage;\n//function that generates a message and displays it depending on whether the currentUser is author\n","import React, { useRef, useState } from \"react\";\nimport {\n  FormSubmit,\n  FormInput,\n  Message,\n  MessageForm,\n  MessagesList,\n  MessageText,\n  RelativeDiv,\n  Header,\n} from \"./styled\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../userSlice\";\nimport generateInitialMessage from \"./generateInitialMessage\";\nimport generateMessage from \"./generateMessage\";\nimport useChatroomMessagesInfo from \"../../utils/useChatroomMessagesInfo\";\n\nconst ChatRoom = ({ firebase }) => {\n  const storeUser = useSelector(selectUser);\n  const { roomRef } = useParams();\n  const dummy = useRef();\n  const { worldIds, messages, currentRoom, messagesRef } = useChatroomMessagesInfo({\n    firebase: firebase,\n    roomRef: roomRef,\n    dummy: dummy,\n  });\n  const [input, setInput] = useState(\"\");\n\n  const onInputChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const onNewMessageSubmit = async (e) => {\n    //on the form submit the new message is being pushed to the room you are currently in\n    e.preventDefault();\n    const { uid, photoURL } = storeUser;\n    if (input.trim() !== \"\") {\n      await messagesRef.add({\n        text: input,\n        createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n        uid,\n        photoURL,\n        authorName: storeUser.displayName,\n      });\n      setInput(\"\");\n    }\n    if (dummy.current) {\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    storeUser && (\n      <RelativeDiv>\n        <Header># {currentRoom && currentRoom.title}</Header>\n        <MessagesList>\n          {messages?.length ? (\n            messages.map((message) => generateMessage(message, storeUser))\n          ) : (\n            <Message isAuthor={false}>\n              <MessageText>{generateInitialMessage(currentRoom)}</MessageText>\n            </Message>\n          )}\n          <div ref={dummy}></div>\n        </MessagesList>\n        <MessageForm onSubmit={onNewMessageSubmit}>\n          <FormInput\n            placeholder={\"ここにメッセージを書いてください\"}\n            value={input}\n            onChange={onInputChange}\n          />\n          <FormSubmit>⬆️</FormSubmit>\n        </MessageForm>\n      </RelativeDiv>\n    )\n  );\n};\nexport default ChatRoom;\n","import styled from \"styled-components\";\n\nconst GridContainer = styled.div`\n  display: grid;\n  width: 100%;\n  grid-template-columns: 300px 1fr;\n`;\n\nexport { GridContainer };\n","import Menu from \"../Menu\";\nimport ChatRoom from \"../ChatRoom\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { GridContainer } from \"./styled\";\nimport { Wrapper } from \"../Wrapper\";\nimport { useSelector } from \"react-redux\";\nimport { selectUser } from \"../../userSlice\";\nimport { Redirect } from \"react-router-dom\";\n\nconst RoomPage = ({ firebase }) => {\n  const storeUser = useSelector(selectUser);\n  const firestore = firebase.firestore();\n  const auth = firebase.auth();\n  const [user] = useAuthState(auth);\n  if (!storeUser) {\n    return <Redirect to=\"/login\"></Redirect>;\n  }\n  return (\n    <>\n      <Wrapper>\n        <GridContainer>\n          <Menu firebase={firebase} firestore={firestore} auth={auth}></Menu>\n          <ChatRoom\n            firebase={firebase}\n            user={user}\n            firestore={firestore}\n            auth={auth}\n          />\n        </GridContainer>\n      </Wrapper>\n    </>\n  );\n};\nexport default RoomPage;\n","import firebase from \"firebase/app\";\nimport { Redirect, Route } from \"react-router-dom\";\nimport Navigation from \"./components/Navigation\";\nimport LoginPage from \"./components/LoginPage/index\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectUser, setUser } from \"./userSlice\";\nimport RoomPage from \"./components/RoomPage\";\nimport { useEffect } from \"react\";\n\n// firebase.initializeApp({\n//   apiKey: \"AIzaSyDWBkQjdvZjHIpip9Z1bm9IpDmzc1XxQmM\",\n//   authDomain: \"react-firebase-chat-app-505e9.firebaseapp.com\",\n//   databaseURL: \"https://react-firebase-chat-app-505e9.firebaseio.com\",\n//   projectId: \"react-firebase-chat-app-505e9\",\n//   storageBucket: \"react-firebase-chat-app-505e9.appspot.com\",\n//   messagingSenderId: \"56873190707\",\n//   appId: \"1:56873190707:web:ae292904dd7bcdb7542a46\",\n//   measurementId: \"G-NKK3HT6H63\",\n// });\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyC-JTU4A_RcX6WZcNjfuHf0A4F4Y-9l24w\",\n  authDomain: \"alpaca-dice-chat.firebaseapp.com\",\n  databaseURL: \"https://alpaca-dice-chat-default-rtdb.firebaseio.com\",\n  projectId: \"alpaca-dice-chat\",\n  storageBucket: \"alpaca-dice-chat.appspot.com\",\n  messagingSenderId: \"956525735606\",\n  appId: \"1:956525735606:web:c3237851cdc71b9c6fc017\"\n});\n\nfunction App() {\n  const auth = firebase ? firebase.auth() : null;\n  const [user] = useAuthState(auth);\n  const dispatch = useDispatch();\n  const storeUser = useSelector(selectUser);\n  useEffect(() => {\n    if (!storeUser && user) {\n      const uid = user.uid;\n      const photoURL = user.photoURL;\n      const displayName = user.displayName;\n      const userInfo = { uid, photoURL, displayName };\n      dispatch(setUser({ userInfo }));\n    }\n  });\n\n  return (\n    <>\n      <Route path=\"/\">\n        <Redirect to=\"/room/general\" firebase={firebase}></Redirect>\n      </Route>\n      <Route path={`/room/:roomRef`}>\n        <Navigation firebase={firebase}></Navigation>\n        <RoomPage firebase={firebase}></RoomPage>\n      </Route>\n      <Route path=\"/login\">\n        <LoginPage auth={auth}></LoginPage>\n      </Route>\n    </>\n  );\n}\n\nexport default App;\n","import { createGlobalStyle } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n    *,*::before,*::after{\n    box-sizing:border-box;\n    }\n    body {\n    margin: 0;\n    color: ${({ theme }) => theme.color.woodsmoke};\n    background-color: ${({ theme }) => theme.color.white};\n    font-family: 'Roboto', sans-serif;\n    }\n`;\n\nexport default GlobalStyle;\n","const theme = {\n  color: {\n    charade: \"#2D2D3A\",\n    midGray: \"#5F5F6E\",\n    thunder: \"#231F20\",\n    shark: \"#1C1C24\",\n    woodsmoke: \"#131419\",\n    buttonBorder: \"#4447E2\",\n    white: \"#FFFFFF\",\n  },\n};\nexport default theme;\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"./userSlice\";\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport GlobalStyle from \"./globalStyle\";\nimport theme from \"./theme\";\nimport store from \"./store\";\nimport { HashRouter } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <HashRouter>\n          <App />\n        </HashRouter>\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}